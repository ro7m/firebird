import { useState, useEffect } from 'react';

const useTextWithSpeech = (initialSections = {}) => {
  const [transcripts, setTranscripts] = useState(initialSections);
  const [recognition, setRecognition] = useState(null);
  const [isRecording, setIsRecording] = useState(false);
  const [activeSection, setActiveSection] = useState(null);

  useEffect(() => {
    if ('webkitSpeechRecognition' in window) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.continuous = true;
      recognition.interimResults = true;

      recognition.onresult = (event) => {
        if (!activeSection) return;

        const result = event.results[event.results.length - 1];
        const transcript = result[0].transcript;

        if (result.isFinal) {
          setTranscripts(prev => {
            const currentText = prev[activeSection] || '';
            // Find the cursor position or use the end of the text
            const cursorPosition = currentText.length;
            
            // Insert the new text at the cursor position
            const newText = 
              currentText.slice(0, cursorPosition) + 
              ' ' + 
              transcript.trim() + 
              currentText.slice(cursorPosition);

            return {
              ...prev,
              [activeSection]: newText.trim()
            };
          });
        }
      };

      recognition.onend = () => {
        if (isRecording) {
          recognition.start();
        }
      };

      recognition.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        setIsRecording(false);
      };

      setRecognition(recognition);
    }
  }, [activeSection, isRecording]);

  const handleTextChange = (section, value) => {
    setTranscripts(prev => ({
      ...prev,
      [section]: value
    }));
  };

  const startRecording = (section) => {
    if (recognition) {
      setActiveSection(section);
      recognition.start();
      setIsRecording(true);
    }
  };

  const stopRecording = () => {
    if (recognition) {
      recognition.stop();
      setIsRecording(false);
      setActiveSection(null);
    }
  };

  return {
    transcripts,
    isRecording,
    handleTextChange,
    startRecording,
    stopRecording
  };
};

// Example usage in a component
const TextInputWithSpeech = ({ section }) => {
  const {
    transcripts,
    isRecording,
    handleTextChange,
    startRecording,
    stopRecording
  } = useTextWithSpeech();

  const text = transcripts[section] || '';

  return (
    <div className="relative">
      <textarea
        className="w-full h-64 p-4 border rounded-md"
        value={text}
        onChange={(e) => handleTextChange(section, e.target.value)}
        placeholder={`Enter ${section.replace(/([A-Z])/g, ' $1').toLowerCase()} notes here...`}
      />
      <button
        className="absolute top-2 right-2 px-3 py-1 bg-blue-500 text-white rounded"
        onClick={() => isRecording ? stopRecording() : startRecording(section)}
      >
        {isRecording ? 'Stop Recording' : 'Start Recording'}
      </button>
    </div>
  );
};

export default TextInputWithSpeech;
